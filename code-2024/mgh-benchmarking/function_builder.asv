n = 100; % use same dimension for all problems
s = 0; % use either 0 or 1 to toggle the initial point

if strcmp(fname, 'band')
    m = n; x0 = -(10^s)*ones(n,1); fmin = 0; %true_sol = [1.098e-5, 9.106]';
    f_M = @(x) band(n,m,x,1);
elseif strcmp(fname, 'bv')
     m = n;
    tmp = (1:n)/(n+1); x0 = zeros(n,1);
    for test_idx=1:n
        x0(test_idx) = tmp(test_idx)*(tmp(test_idx)-1);
    end
    x0 = (10^s)*x0;
    fmin = 0;
    f_M = @(x) bv(n,m,x,1);
elseif strcmp(fname, 'ie')
    m = n;
    tmp = (1:n)/(n+1); x0 = zeros(n,1);
    for test_idx=1:n
        x0(test_idx) = tmp(test_idx)*(tmp(test_idx)-1);
    end
    x0 = (10^s)*x0;
    fmin = 0;
    f_M = @(x) ie(n,m,x,1);
elseif strcmp(fname, 'lin')
    m = n; x0 = ones(n,1); fmin = m-n;
    x0 = (10^s)*x0;
    f_M = @(x) lin(n,m,x,1);
elseif strcmp(fname, 'lin0')
    m = n; x0 = ones(n,1); fmin = (m*m+3*m-6)/2/(2*m-3);
    x0 = (10^s)*x0;
    f_M = @(x) lin0(n,m,x,1);
elseif strcmp(fname, 'lin1')
    m = n; x0 = ones(n,1); fmin = (m*(m-1))/2/(2*m+1);
    x0 = (10^s)*x0;
    f_M = @(x) lin1(n,m,x,1);
elseif strcmp(fname,'pen1')
    m = n+1; x0 = (1:n)'; fmin = 7.08765e-5;
    x0 = (10^s)*x0;
    f_M = @(x) pen1(n,m,x,1);
elseif strcmp(fname, 'pen2')
    m = 2*n; x0 = 0.5*ones(n,1); fmin = 2.93660e-4;
    x0 = (10^s)*x0;
    f_M = @(x) pen2(n,m,x,1);
elseif strcmp(fname, 'rosex')
    m = n; 
    x0 = zeros(n,1);
    for test_idx=1:n
        if rem(test_idx,2)==0
            x0(test_idx) = 1;
        else
            x0(test_idx) = -1.2;
        end
    end
    x0 = (10^s)*x0;
    fmin = 0;
    f_M = @(x) rosex(n,m,x,1);
elseif strcmp(fname, 'singx')
    m = n; 
    x0 = zeros(n,1);
    for test_idx=1:n
        if rem(test_idx,4)==1
            x0(test_idx) = 3;
        elseif rem(test_idx,4)==2
            x0(test_idx) = -1;
        elseif rem(test_idx,4)==3
            x0(test_idx) = 0;
        elseif rem(test_idx,4)==4
            x0(test_idx) = 1;
        end
    end
    x0 = (10^s)*x0;
    fmin = 0;
    f_M = @(x) singx(n,m,x,1);
elseif strcmp(fname, 'trid')
    m = n; x0 = -ones(n,1); fmin = 0;
    x0 = (10^s)*x0;
    f_M = @(x) trid(n,m,x,1);
elseif strcmp(fname, 'trig')
    m = n; x0 = 1/n*ones(n,1); fmin = 0;
    x0 = (10^s)*x0;
    f_M = @(x) trig(n,m,x,1);
elseif strcmp(fname, 'vardim')
    n = 100; m = n+2; x0 = 1 - (1:n)'/n; fmin = 0;
    x0 = (10^s)*x0;
    f_M = @(x) vardim(n,m,x,1);
elseif strcmp(fname, 'bl')
    m = n; x0 = 0.5*ones(n,1); fmin = 0;
    x0 = (10^s)*x0;
    f_M = @(x) bl(n,m,x,1);
        end
        freq = 2*pi*5e1*ones(n,1);
        fx0 = sum(f_M(x0).^2);
    else
        n = 20;
        lambda = +0.01;%1e-2;
        rk = n;
        A = randn(n, rk); A = A*A'; A = A/trace(A)*n + lambda*eye(n);
%         A = diag(2.^(1:n));
%         P = orth(A);
%         A = eye(n);
        alpha =  0.1*ones(n,1); % rand(n,1)*n; % zeros(n,1);  % beta = rand(n,1);
        f_M = @(x) dot(alpha, x.^4) + 0.5*dot(x,A*x);% + (exp(sum(x)/n)-0.97);
%         f_M = @(x) 0.5*dot(x,A*x);% + (exp(sum(x)/n)-0.97);
%         f_M = @(x) f_base(P*x);
        fmin = 0; x0 = ones(n,1); x0 = x0/norm(x0)*2;
        freq = 2*pi*5e1*ones(n,1);
        fx0 = f_M(x0);
        fname = 'cvx quartic';
    end
    
    
    
%     noise_lvl = noise_lvl * (fx0-fmin);
%     f = @(x) sum(f_M(x).^2) + noise(x, 400, noise_lvl*EPS); % random noise
%     f = @(x) sum(f_M(x).^2) + noise(x, 100, noise_lvl*EPS); % oscillation
%     f = @(x) sum(f_M(x)) + noise(x, freq, noise_lvl*(fx0-fmin)) + noise_lvl*(fx0-fmin); % oscillation for quartic
%     f = @(x) sum(f_M(x).^2) + noise(x, freq, noise_lvl*(fx0-fmin)) + noise_lvl*(fx0-fmin); % oscillation for More
    f = @(x) sum(f_M(x).^2);
    fparam = struct;
    fparam.f = f;
    fparam.fmin = fmin;
    fparam.name = fname;
    %fparam.true_sol = true_sol;

%% setup algorithm parameters
% QN parameter (base)

%---------------------------
meas_coeff = ceil(2*log(n));
m = floor(n*meas_coeff);
randvectors_given = false;
%---------------------------

if ~again
    param = struct;
end

param.n = n;
fmin = fparam.fmin;
% EPS = 1e-5; % 1e-1; 1e-3; 1e-5;
if ~again
    param.x0 = x0;
end

f0 = fx0; %f(param.x0);
if MORETEST
    param.eps = EPS*(f0-fmin); % STP paper
else
    param.eps = EPS*(f0-fmin); % STP paper
%     param.eps = EPS;
end
param.eps_bergou = EPS;
param.maxit = maxit;
param.MAX_QUERIES = budget; %2*param.maxit;
param.verbose = verbose;
param.randAlg = 'G';

% for SPSA/2SPSA
param.tol1 = Inf; % prevents too large steps
param.tol2 = 0; % min decrease
% disp('Parameter Settings are done!');

function e = noise(x, freq, noise_lvl)
if noise_lvl>0
    % e = noise_lvl*(rand-0.5);
    n = length(x);
    e = noise_lvl*1/n*(n-sum(cos(freq.*x)));
else
    e = 0;
end
end
