function Result = DirectSearchRR(fparam, param)
%        Result = DirectSearchRR(fparam, param)
% An implementation of the probabilistic direct search algorithm of 
% "Direct Search Based on Probabilistic Descent in Reduced Subspaces" by 
% Roberts and Royer (2023).
% We implement the most performant variant: r=1 and Gaussian P_k

algname = 'DirectSearchRR';
%% INITIALIZATION
Result = struct;
Result.algname = algname;
n = param.n;
eps = 1e-6; 

if isfield(param, 'eps')
    eps = param.eps;
end
if isfield(param, 'x0')
    x = param.x0;
else
    x = zeros(n,1);
end
if isfield(param, 'maxit')
    maxit = param.maxit;
else
    maxit = 100;
end
if isfield(param, 'verbose')
    verbose = param.verbose;
else
    verbose = false;
end
if isfield(fparam, 'fmin')
    fmin = fparam.fmin;
end
if isfield(param, 'num_samples')
    num_samples = param.num_samples;
else
    num_samples = 1;
end
if num_samples > 1
    disp('Sorry, we have not implemented that functionality')
    return
end
if isfield(param, 'alpha0')
    alpha = param.alpha0;
else
    alpha = 1.0; %value used in experiments of Roberts and Royer
end
if isfield(param, 'alpha_max')
    alpha_max = param.alpha_max;
else
    alpha_max = 1000; % default value used in experiments of Roberts and Royer
if isfield(param, 'gamma_inc')
    gamma_inc = param.gamma_inc;
else
    gamma_inc = 2; %value used in experiments of Royer and Roberts
end
if isfield(param, 'gamma_dec')
    gamma_dec = param.gamma_dec;
else
    gamma_dec = 0.5; % value used in experiments of Roberts and Royer.
end

% Next if statement allows for functions which require further 
% parameters at evaluation.
if isfield(fparam, 'requires_params')
    requires_params = fparam.requires_params;
else
    requires_params = false;
end
f = fparam.f;

% Some arrays to store results
objval_seq = zeros(maxit+1,1);
if requires_params
    fx = f(x, fparam);
    objval_seq(1) = fx; %initialization
else
    fx = f(x);
    objval_seq(1) = fx; %initialization
end
num_queries = zeros(maxit+1,1);
num_queries(1) = 1;

for k=1:maxit
    flag = false;
    fx = objeval_seq(k);
    if isfield(fparam, 'fmin')
        if (fx < fmin + eps) 
            if verbose
                disp([algname, ' Converged in ', num2str(k),' steps. Exit the loop']);
                disp(['Function val = ' , num2str(fx)]);
            end
            converged = true;
            break;
        end
    end
    if (num_queries(k)>param.budget)
        if verbose
            disp('Max queries hit!')
        end
        converged = false;
        break;
    end
    num_queries(k+1) = num_queries(k);
    while flag == false
        u = randn(n,1);
        x_plus = x + alpha*u;
        target = c*alpha^2*norm(u,2)^2/2;
        if requires_params
            f_plus = f(x_plus, fparam);
        else
            f_plus = f(x_plus);
        end
    
        if f_plus < fx - target
            x = x_plus;
            flag = true;
            num_queries(k+1) = num_queries(k+1) + 1;
            objval_seq(k+1) = f_plus;
            alpha = min(gamma_dec*alpha, alpha_max);
            disp(['Current objective function value is ', num2str(f_plus)])
        end

        if flag == false
            x_minus = x - alpha*u;
            if requires_params
                f_minus = f(x_minus, fparam);
            else
                f_minus = f(x_minus);
            end

            if f_minus < fx - target
                x = x_minus;
                flag = true;
                num_queries(k+1) = num_queries(k+1) + 2; %also count the query at x_plus
                objval_seq(k+1) = f_minus;
                disp(['Current objective function value is ', num2str(f_minus)])
            end
        end
    end
end

if (k>=maxit)
    if verbose
        disp([algname, ' did not converge in ', num2str(maxit) , ' steps.']);
    end
    converged = false;
end

num_iter = k;
objval_seq = objval_seq(1:num_iter+1);
num_queries = num_queries(1:num_iter+1);

% put into a struct for output
Result.objval_seq = objval_seq;
Result.num_iter = num_iter;
Result.num_queries = num_queries;
Result.converged = converged;
Result.sol = x;

end
